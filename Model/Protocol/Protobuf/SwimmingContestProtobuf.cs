// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SwimmingContestProtobuf.proto

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;

namespace Model.Protocol.Protobuf
{
    /// <summary>Holder for reflection information generated from SwimmingContestProtobuf.proto</summary>
    public static partial class SwimmingContestProtobufReflection
    {
        #region Descriptor

        /// <summary>File descriptor for SwimmingContestProtobuf.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        private static pbr::FileDescriptor descriptor;

        static SwimmingContestProtobufReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                    "Ch1Td2ltbWluZ0NvbnRlc3RQcm90b2J1Zi5wcm90bxIXbW9kZWwucHJvdG9j",
                    "b2wucHJvdG9idWYiSQoHU3dpbW1lchIKCgJJRBgBIAEoBRISCgpmaXJzdF9u",
                    "YW1lGAIgASgJEhEKCWxhc3RfbmFtZRgDIAEoCRILCgNhZ2UYBCABKAUiLgoI",
                    "QWRtaW5EVE8SEAoIdXNlcm5hbWUYASABKAkSEAoIcGFzc3dvcmQYAiABKAki",
                    "lgEKDlJhY2VEZXRhaWxzRFRPEkQKEXN3aW1taW5nX2Rpc3RhbmNlGAEgASgO",
                    "MikubW9kZWwucHJvdG9jb2wucHJvdG9idWYuU3dpbW1pbmdEaXN0YW5jZRI+",
                    "Cg5zd2ltbWluZ19zdHlsZRgCIAEoDjImLm1vZGVsLnByb3RvY29sLnByb3Rv",
                    "YnVmLlN3aW1taW5nU3R5bGUipAEKB1JhY2VEVE8SRAoRc3dpbW1pbmdfZGlz",
                    "dGFuY2UYASABKA4yKS5tb2RlbC5wcm90b2NvbC5wcm90b2J1Zi5Td2ltbWlu",
                    "Z0Rpc3RhbmNlEj4KDnN3aW1taW5nX3N0eWxlGAIgASgOMiYubW9kZWwucHJv",
                    "dG9jb2wucHJvdG9idWYuU3dpbW1pbmdTdHlsZRITCgtub19zd2ltbWVycxgD",
                    "IAEoBSKDAQoKU3dpbW1lckRUTxIxCgdzd2ltbWVyGAEgASgLMiAubW9kZWwu",
                    "cHJvdG9jb2wucHJvdG9idWYuU3dpbW1lchJCChFyYWNlX2RldGFpbHNfRFRP",
                    "cxgCIAMoCzInLm1vZGVsLnByb3RvY29sLnByb3RvYnVmLlJhY2VEZXRhaWxz",
                    "RFRPIkQKDExvZ2luUmVxdWVzdBI0CglhZG1pbl9EVE8YASABKAsyIS5tb2Rl",
                    "bC5wcm90b2NvbC5wcm90b2J1Zi5BZG1pbkRUTyIhCg1Mb2dvdXRSZXF1ZXN0",
                    "EhAKCHVzZXJuYW1lGAEgASgJIhwKGkZpbmRBbGxSYWNlc0RldGFpbHNSZXF1",
                    "ZXN0ImkKJEZpbmRBbGxTd2ltbWVyc0RldGFpbHNGb3JSYWNlUmVxdWVzdBJB",
                    "ChByYWNlX2RldGFpbHNfRFRPGAEgASgLMicubW9kZWwucHJvdG9jb2wucHJv",
                    "dG9idWYuUmFjZURldGFpbHNEVE8iTQoRQWRkU3dpbW1lclJlcXVlc3QSOAoL",
                    "c3dpbW1lcl9EVE8YASABKAsyIy5tb2RlbC5wcm90b2NvbC5wcm90b2J1Zi5T",
                    "d2ltbWVyRFRPIroDCgdSZXF1ZXN0Ej4KDWxvZ2luX3JlcXVlc3QYASABKAsy",
                    "JS5tb2RlbC5wcm90b2NvbC5wcm90b2J1Zi5Mb2dpblJlcXVlc3RIABJACg5s",
                    "b2dvdXRfcmVxdWVzdBgCIAEoCzImLm1vZGVsLnByb3RvY29sLnByb3RvYnVm",
                    "LkxvZ291dFJlcXVlc3RIABJdCh5maW5kX2FsbF9yYWNlc19kZXRhaWxzX3Jl",
                    "cXVlc3QYAyABKAsyMy5tb2RlbC5wcm90b2NvbC5wcm90b2J1Zi5GaW5kQWxs",
                    "UmFjZXNEZXRhaWxzUmVxdWVzdEgAEnMKKmZpbmRfYWxsX3N3aW1tZXJzX2Rl",
                    "dGFpbHNfZm9yX3JhY2VfcmVxdWVzdBgEIAEoCzI9Lm1vZGVsLnByb3RvY29s",
                    "LnByb3RvYnVmLkZpbmRBbGxTd2ltbWVyc0RldGFpbHNGb3JSYWNlUmVxdWVz",
                    "dEgAEkkKE2FkZF9zd2ltbWVyX3JlcXVlc3QYBSABKAsyKi5tb2RlbC5wcm90",
                    "b2NvbC5wcm90b2J1Zi5BZGRTd2ltbWVyUmVxdWVzdEgAQg4KDHJlcXVlc3Rf",
                    "dHlwZSIMCgpPa1Jlc3BvbnNlIiYKDUVycm9yUmVzcG9uc2USFQoNZXJyb3Jf",
                    "bWVzc2FnZRgBIAEoCSJaChtGaW5kQWxsUmFjZXNEZXRhaWxzUmVzcG9uc2US",
                    "OwoRYWxsX3JhY2VzX2RldGFpbHMYASADKAsyIC5tb2RlbC5wcm90b2NvbC5w",
                    "cm90b2J1Zi5SYWNlRFRPInMKJUZpbmRBbGxTd2ltbWVyc0RldGFpbHNGb3JS",
                    "YWNlUmVzcG9uc2USSgodYWxsX3N3aW1tZXJzX2RldGFpbHNfZm9yX3JhY2UY",
                    "ASADKAsyIy5tb2RlbC5wcm90b2NvbC5wcm90b2J1Zi5Td2ltbWVyRFRPIhYK",
                    "FFJhY2VzVXBkYXRlZFJlc3BvbnNlIsIDCghSZXNwb25zZRI6Cgtva19yZXNw",
                    "b25zZRgBIAEoCzIjLm1vZGVsLnByb3RvY29sLnByb3RvYnVmLk9rUmVzcG9u",
                    "c2VIABJACg5lcnJvcl9yZXNwb25zZRgCIAEoCzImLm1vZGVsLnByb3RvY29s",
                    "LnByb3RvYnVmLkVycm9yUmVzcG9uc2VIABJfCh9maW5kX2FsbF9yYWNlc19k",
                    "ZXRhaWxzX3Jlc3BvbnNlGAMgASgLMjQubW9kZWwucHJvdG9jb2wucHJvdG9i",
                    "dWYuRmluZEFsbFJhY2VzRGV0YWlsc1Jlc3BvbnNlSAASdQorZmluZF9hbGxf",
                    "c3dpbW1lcnNfZGV0YWlsc19mb3JfcmFjZV9yZXNwb25zZRgEIAEoCzI+Lm1v",
                    "ZGVsLnByb3RvY29sLnByb3RvYnVmLkZpbmRBbGxTd2ltbWVyc0RldGFpbHNG",
                    "b3JSYWNlUmVzcG9uc2VIABJPChZyYWNlc191cGRhdGVkX3Jlc3BvbnNlGAUg",
                    "ASgLMi0ubW9kZWwucHJvdG9jb2wucHJvdG9idWYuUmFjZXNVcGRhdGVkUmVz",
                    "cG9uc2VIAEIPCg1yZXNwb25zZV90eXBlKloKDVN3aW1taW5nU3R5bGUSEAoM",
                    "VW5rbm93blN0eWxlEAASCQoFTWl4ZWQQARINCglGcmVlc3R5bGUQAhINCglC",
                    "dXR0ZXJmbHkQAxIOCgpCYWNrc3Ryb2tlEAQqUwoQU3dpbW1pbmdEaXN0YW5j",
                    "ZRITCg9Vbmtub3duRGlzdGFuY2UQABIICgRfNTBtEAESCQoFXzIwMG0QAhIJ",
                    "CgVfODAwbRADEgoKBl8xNTAwbRAEQhMKEXByb3RvY29sLnByb3RvYnVmYgZw",
                    "cm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(
                    new[]
                    {
                        typeof(global::Model.Protocol.Protobuf.SwimmingStyle),
                        typeof(global::Model.Protocol.Protobuf.SwimmingDistance)
                    }, new pbr::GeneratedClrTypeInfo[]
                    {
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.Swimmer),
                            global::Model.Protocol.Protobuf.Swimmer.Parser,
                            new[] {"ID", "FirstName", "LastName", "Age"}, null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.AdminDTO),
                            global::Model.Protocol.Protobuf.AdminDTO.Parser, new[] {"Username", "Password"}, null, null,
                            null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.RaceDetailsDTO),
                            global::Model.Protocol.Protobuf.RaceDetailsDTO.Parser,
                            new[] {"SwimmingDistance", "SwimmingStyle"}, null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.RaceDTO),
                            global::Model.Protocol.Protobuf.RaceDTO.Parser,
                            new[] {"SwimmingDistance", "SwimmingStyle", "NoSwimmers"}, null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.SwimmerDTO),
                            global::Model.Protocol.Protobuf.SwimmerDTO.Parser, new[] {"Swimmer", "RaceDetailsDTOs"},
                            null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.LoginRequest),
                            global::Model.Protocol.Protobuf.LoginRequest.Parser, new[] {"AdminDTO"}, null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.LogoutRequest),
                            global::Model.Protocol.Protobuf.LogoutRequest.Parser, new[] {"Username"}, null, null, null),
                        new pbr::GeneratedClrTypeInfo(
                            typeof(global::Model.Protocol.Protobuf.FindAllRacesDetailsRequest),
                            global::Model.Protocol.Protobuf.FindAllRacesDetailsRequest.Parser, null, null, null, null),
                        new pbr::GeneratedClrTypeInfo(
                            typeof(global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceRequest),
                            global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceRequest.Parser,
                            new[] {"RaceDetailsDTO"}, null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.AddSwimmerRequest),
                            global::Model.Protocol.Protobuf.AddSwimmerRequest.Parser, new[] {"SwimmerDTO"}, null, null,
                            null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.Request),
                            global::Model.Protocol.Protobuf.Request.Parser,
                            new[]
                            {
                                "LoginRequest", "LogoutRequest", "FindAllRacesDetailsRequest",
                                "FindAllSwimmersDetailsForRaceRequest", "AddSwimmerRequest"
                            }, new[] {"RequestType"}, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.OkResponse),
                            global::Model.Protocol.Protobuf.OkResponse.Parser, null, null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.ErrorResponse),
                            global::Model.Protocol.Protobuf.ErrorResponse.Parser, new[] {"ErrorMessage"}, null, null,
                            null),
                        new pbr::GeneratedClrTypeInfo(
                            typeof(global::Model.Protocol.Protobuf.FindAllRacesDetailsResponse),
                            global::Model.Protocol.Protobuf.FindAllRacesDetailsResponse.Parser,
                            new[] {"AllRacesDetails"}, null, null, null),
                        new pbr::GeneratedClrTypeInfo(
                            typeof(global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceResponse),
                            global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceResponse.Parser,
                            new[] {"AllSwimmersDetailsForRace"}, null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.RacesUpdatedResponse),
                            global::Model.Protocol.Protobuf.RacesUpdatedResponse.Parser, null, null, null, null),
                        new pbr::GeneratedClrTypeInfo(typeof(global::Model.Protocol.Protobuf.Response),
                            global::Model.Protocol.Protobuf.Response.Parser,
                            new[]
                            {
                                "OkResponse", "ErrorResponse", "FindAllRacesDetailsResponse",
                                "FindAllSwimmersDetailsForRaceResponse", "RacesUpdatedResponse"
                            }, new[] {"ResponseType"}, null, null)
                    }));
        }

        #endregion
    }

    #region Enums

    public enum SwimmingStyle
    {
        [pbr::OriginalName("UnknownStyle")] UnknownStyle = 0,
        [pbr::OriginalName("Mixed")] Mixed = 1,
        [pbr::OriginalName("Freestyle")] Freestyle = 2,
        [pbr::OriginalName("Butterfly")] Butterfly = 3,
        [pbr::OriginalName("Backstroke")] Backstroke = 4
    }

    public enum SwimmingDistance
    {
        [pbr::OriginalName("UnknownDistance")] UnknownDistance = 0,
        [pbr::OriginalName("_50m")] _50M = 1,
        [pbr::OriginalName("_200m")] _200M = 2,
        [pbr::OriginalName("_800m")] _800M = 3,
        [pbr::OriginalName("_1500m")] _1500M = 4
    }

    #endregion

    #region Messages

    public sealed partial class Swimmer : pb::IMessage<Swimmer>
    {
        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;

        /// <summary>Field number for the "first_name" field.</summary>
        public const int FirstNameFieldNumber = 2;

        /// <summary>Field number for the "last_name" field.</summary>
        public const int LastNameFieldNumber = 3;

        /// <summary>Field number for the "age" field.</summary>
        public const int AgeFieldNumber = 4;

        private static readonly pb::MessageParser<Swimmer>
            _parser = new pb::MessageParser<Swimmer>(() => new Swimmer());

        private int age_;
        private string firstName_ = "";
        private int iD_;
        private string lastName_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Swimmer()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Swimmer(Swimmer other) : this()
        {
            iD_ = other.iD_;
            firstName_ = other.firstName_;
            lastName_ = other.lastName_;
            age_ = other.age_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Swimmer> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ID
        {
            get { return iD_; }
            set { iD_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirstName
        {
            get { return firstName_; }
            set { firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LastName
        {
            get { return lastName_; }
            set { lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Age
        {
            get { return age_; }
            set { age_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Swimmer Clone()
        {
            return new Swimmer(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Swimmer other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (ID != other.ID) return false;
            if (FirstName != other.FirstName) return false;
            if (LastName != other.LastName) return false;
            if (Age != other.Age) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ID != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ID);
            }

            if (FirstName.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(FirstName);
            }

            if (LastName.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(LastName);
            }

            if (Age != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(Age);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
            }

            if (FirstName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
            }

            if (LastName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
            }

            if (Age != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Swimmer other)
        {
            if (other == null)
            {
                return;
            }

            if (other.ID != 0)
            {
                ID = other.ID;
            }

            if (other.FirstName.Length != 0)
            {
                FirstName = other.FirstName;
            }

            if (other.LastName.Length != 0)
            {
                LastName = other.LastName;
            }

            if (other.Age != 0)
            {
                Age = other.Age;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        ID = input.ReadInt32();
                        break;
                    }
                    case 18:
                    {
                        FirstName = input.ReadString();
                        break;
                    }
                    case 26:
                    {
                        LastName = input.ReadString();
                        break;
                    }
                    case 32:
                    {
                        Age = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Swimmer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID != 0) hash ^= ID.GetHashCode();
            if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
            if (LastName.Length != 0) hash ^= LastName.GetHashCode();
            if (Age != 0) hash ^= Age.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class AdminDTO : pb::IMessage<AdminDTO>
    {
        /// <summary>Field number for the "username" field.</summary>
        public const int UsernameFieldNumber = 1;

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 2;

        private static readonly pb::MessageParser<AdminDTO> _parser =
            new pb::MessageParser<AdminDTO>(() => new AdminDTO());

        private string password_ = "";
        private string username_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AdminDTO()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AdminDTO(AdminDTO other) : this()
        {
            username_ = other.username_;
            password_ = other.password_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AdminDTO> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Username
        {
            get { return username_; }
            set { username_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password
        {
            get { return password_; }
            set { password_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AdminDTO Clone()
        {
            return new AdminDTO(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AdminDTO other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Username != other.Username) return false;
            if (Password != other.Password) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Username.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Username);
            }

            if (Password.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Password);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Username.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
            }

            if (Password.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AdminDTO other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Username.Length != 0)
            {
                Username = other.Username;
            }

            if (other.Password.Length != 0)
            {
                Password = other.Password;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Username = input.ReadString();
                        break;
                    }
                    case 18:
                    {
                        Password = input.ReadString();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AdminDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Username.Length != 0) hash ^= Username.GetHashCode();
            if (Password.Length != 0) hash ^= Password.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class RaceDetailsDTO : pb::IMessage<RaceDetailsDTO>
    {
        /// <summary>Field number for the "swimming_distance" field.</summary>
        public const int SwimmingDistanceFieldNumber = 1;

        /// <summary>Field number for the "swimming_style" field.</summary>
        public const int SwimmingStyleFieldNumber = 2;

        private static readonly pb::MessageParser<RaceDetailsDTO> _parser =
            new pb::MessageParser<RaceDetailsDTO>(() => new RaceDetailsDTO());

        private global::Model.Protocol.Protobuf.SwimmingDistance swimmingDistance_ = 0;
        private global::Model.Protocol.Protobuf.SwimmingStyle swimmingStyle_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RaceDetailsDTO()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RaceDetailsDTO(RaceDetailsDTO other) : this()
        {
            swimmingDistance_ = other.swimmingDistance_;
            swimmingStyle_ = other.swimmingStyle_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RaceDetailsDTO> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.SwimmingDistance SwimmingDistance
        {
            get { return swimmingDistance_; }
            set { swimmingDistance_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.SwimmingStyle SwimmingStyle
        {
            get { return swimmingStyle_; }
            set { swimmingStyle_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RaceDetailsDTO Clone()
        {
            return new RaceDetailsDTO(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RaceDetailsDTO other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (SwimmingDistance != other.SwimmingDistance) return false;
            if (SwimmingStyle != other.SwimmingStyle) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SwimmingDistance != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int) SwimmingDistance);
            }

            if (SwimmingStyle != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int) SwimmingStyle);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SwimmingDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwimmingDistance);
            }

            if (SwimmingStyle != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwimmingStyle);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RaceDetailsDTO other)
        {
            if (other == null)
            {
                return;
            }

            if (other.SwimmingDistance != 0)
            {
                SwimmingDistance = other.SwimmingDistance;
            }

            if (other.SwimmingStyle != 0)
            {
                SwimmingStyle = other.SwimmingStyle;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        swimmingDistance_ = (global::Model.Protocol.Protobuf.SwimmingDistance) input.ReadEnum();
                        break;
                    }
                    case 16:
                    {
                        swimmingStyle_ = (global::Model.Protocol.Protobuf.SwimmingStyle) input.ReadEnum();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RaceDetailsDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SwimmingDistance != 0) hash ^= SwimmingDistance.GetHashCode();
            if (SwimmingStyle != 0) hash ^= SwimmingStyle.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class RaceDTO : pb::IMessage<RaceDTO>
    {
        /// <summary>Field number for the "swimming_distance" field.</summary>
        public const int SwimmingDistanceFieldNumber = 1;

        /// <summary>Field number for the "swimming_style" field.</summary>
        public const int SwimmingStyleFieldNumber = 2;

        /// <summary>Field number for the "no_swimmers" field.</summary>
        public const int NoSwimmersFieldNumber = 3;

        private static readonly pb::MessageParser<RaceDTO>
            _parser = new pb::MessageParser<RaceDTO>(() => new RaceDTO());

        private int noSwimmers_;
        private global::Model.Protocol.Protobuf.SwimmingDistance swimmingDistance_ = 0;
        private global::Model.Protocol.Protobuf.SwimmingStyle swimmingStyle_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RaceDTO()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RaceDTO(RaceDTO other) : this()
        {
            swimmingDistance_ = other.swimmingDistance_;
            swimmingStyle_ = other.swimmingStyle_;
            noSwimmers_ = other.noSwimmers_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RaceDTO> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.SwimmingDistance SwimmingDistance
        {
            get { return swimmingDistance_; }
            set { swimmingDistance_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.SwimmingStyle SwimmingStyle
        {
            get { return swimmingStyle_; }
            set { swimmingStyle_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NoSwimmers
        {
            get { return noSwimmers_; }
            set { noSwimmers_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RaceDTO Clone()
        {
            return new RaceDTO(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RaceDTO other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (SwimmingDistance != other.SwimmingDistance) return false;
            if (SwimmingStyle != other.SwimmingStyle) return false;
            if (NoSwimmers != other.NoSwimmers) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SwimmingDistance != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int) SwimmingDistance);
            }

            if (SwimmingStyle != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int) SwimmingStyle);
            }

            if (NoSwimmers != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(NoSwimmers);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SwimmingDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwimmingDistance);
            }

            if (SwimmingStyle != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwimmingStyle);
            }

            if (NoSwimmers != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoSwimmers);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RaceDTO other)
        {
            if (other == null)
            {
                return;
            }

            if (other.SwimmingDistance != 0)
            {
                SwimmingDistance = other.SwimmingDistance;
            }

            if (other.SwimmingStyle != 0)
            {
                SwimmingStyle = other.SwimmingStyle;
            }

            if (other.NoSwimmers != 0)
            {
                NoSwimmers = other.NoSwimmers;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        swimmingDistance_ = (global::Model.Protocol.Protobuf.SwimmingDistance) input.ReadEnum();
                        break;
                    }
                    case 16:
                    {
                        swimmingStyle_ = (global::Model.Protocol.Protobuf.SwimmingStyle) input.ReadEnum();
                        break;
                    }
                    case 24:
                    {
                        NoSwimmers = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RaceDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SwimmingDistance != 0) hash ^= SwimmingDistance.GetHashCode();
            if (SwimmingStyle != 0) hash ^= SwimmingStyle.GetHashCode();
            if (NoSwimmers != 0) hash ^= NoSwimmers.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class SwimmerDTO : pb::IMessage<SwimmerDTO>
    {
        /// <summary>Field number for the "swimmer" field.</summary>
        public const int SwimmerFieldNumber = 1;

        /// <summary>Field number for the "race_details_DTOs" field.</summary>
        public const int RaceDetailsDTOsFieldNumber = 2;

        private static readonly pb::MessageParser<SwimmerDTO> _parser =
            new pb::MessageParser<SwimmerDTO>(() => new SwimmerDTO());

        private static readonly pb::FieldCodec<global::Model.Protocol.Protobuf.RaceDetailsDTO>
            _repeated_raceDetailsDTOs_codec
                = pb::FieldCodec.ForMessage(18, global::Model.Protocol.Protobuf.RaceDetailsDTO.Parser);

        private readonly pbc::RepeatedField<global::Model.Protocol.Protobuf.RaceDetailsDTO> raceDetailsDTOs_ =
            new pbc::RepeatedField<global::Model.Protocol.Protobuf.RaceDetailsDTO>();

        private global::Model.Protocol.Protobuf.Swimmer swimmer_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SwimmerDTO()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SwimmerDTO(SwimmerDTO other) : this()
        {
            Swimmer = other.swimmer_ != null ? other.Swimmer.Clone() : null;
            raceDetailsDTOs_ = other.raceDetailsDTOs_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SwimmerDTO> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.Swimmer Swimmer
        {
            get { return swimmer_; }
            set { swimmer_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Model.Protocol.Protobuf.RaceDetailsDTO> RaceDetailsDTOs
        {
            get { return raceDetailsDTOs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SwimmerDTO Clone()
        {
            return new SwimmerDTO(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SwimmerDTO other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(Swimmer, other.Swimmer)) return false;
            if (!raceDetailsDTOs_.Equals(other.raceDetailsDTOs_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (swimmer_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Swimmer);
            }

            raceDetailsDTOs_.WriteTo(output, _repeated_raceDetailsDTOs_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (swimmer_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Swimmer);
            }

            size += raceDetailsDTOs_.CalculateSize(_repeated_raceDetailsDTOs_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SwimmerDTO other)
        {
            if (other == null)
            {
                return;
            }

            if (other.swimmer_ != null)
            {
                if (swimmer_ == null)
                {
                    swimmer_ = new global::Model.Protocol.Protobuf.Swimmer();
                }

                Swimmer.MergeFrom(other.Swimmer);
            }

            raceDetailsDTOs_.Add(other.raceDetailsDTOs_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        if (swimmer_ == null)
                        {
                            swimmer_ = new global::Model.Protocol.Protobuf.Swimmer();
                        }

                        input.ReadMessage(swimmer_);
                        break;
                    }
                    case 18:
                    {
                        raceDetailsDTOs_.AddEntriesFrom(input, _repeated_raceDetailsDTOs_codec);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SwimmerDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (swimmer_ != null) hash ^= Swimmer.GetHashCode();
            hash ^= raceDetailsDTOs_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class LoginRequest : pb::IMessage<LoginRequest>
    {
        /// <summary>Field number for the "admin_DTO" field.</summary>
        public const int AdminDTOFieldNumber = 1;

        private static readonly pb::MessageParser<LoginRequest> _parser =
            new pb::MessageParser<LoginRequest>(() => new LoginRequest());

        private global::Model.Protocol.Protobuf.AdminDTO adminDTO_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoginRequest()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoginRequest(LoginRequest other) : this()
        {
            AdminDTO = other.adminDTO_ != null ? other.AdminDTO.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LoginRequest> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.AdminDTO AdminDTO
        {
            get { return adminDTO_; }
            set { adminDTO_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoginRequest Clone()
        {
            return new LoginRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LoginRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(AdminDTO, other.AdminDTO)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (adminDTO_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(AdminDTO);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (adminDTO_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdminDTO);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LoginRequest other)
        {
            if (other == null)
            {
                return;
            }

            if (other.adminDTO_ != null)
            {
                if (adminDTO_ == null)
                {
                    adminDTO_ = new global::Model.Protocol.Protobuf.AdminDTO();
                }

                AdminDTO.MergeFrom(other.AdminDTO);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        if (adminDTO_ == null)
                        {
                            adminDTO_ = new global::Model.Protocol.Protobuf.AdminDTO();
                        }

                        input.ReadMessage(adminDTO_);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LoginRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (adminDTO_ != null) hash ^= AdminDTO.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class LogoutRequest : pb::IMessage<LogoutRequest>
    {
        /// <summary>Field number for the "username" field.</summary>
        public const int UsernameFieldNumber = 1;

        private static readonly pb::MessageParser<LogoutRequest> _parser =
            new pb::MessageParser<LogoutRequest>(() => new LogoutRequest());

        private string username_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogoutRequest()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogoutRequest(LogoutRequest other) : this()
        {
            username_ = other.username_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LogoutRequest> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Username
        {
            get { return username_; }
            set { username_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogoutRequest Clone()
        {
            return new LogoutRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LogoutRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Username != other.Username) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Username.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Username);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Username.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LogoutRequest other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Username.Length != 0)
            {
                Username = other.Username;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Username = input.ReadString();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LogoutRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Username.Length != 0) hash ^= Username.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class FindAllRacesDetailsRequest : pb::IMessage<FindAllRacesDetailsRequest>
    {
        private static readonly pb::MessageParser<FindAllRacesDetailsRequest> _parser =
            new pb::MessageParser<FindAllRacesDetailsRequest>(() => new FindAllRacesDetailsRequest());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllRacesDetailsRequest()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllRacesDetailsRequest(FindAllRacesDetailsRequest other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FindAllRacesDetailsRequest> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllRacesDetailsRequest Clone()
        {
            return new FindAllRacesDetailsRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FindAllRacesDetailsRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FindAllRacesDetailsRequest other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FindAllRacesDetailsRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class
        FindAllSwimmersDetailsForRaceRequest : pb::IMessage<FindAllSwimmersDetailsForRaceRequest>
    {
        /// <summary>Field number for the "race_details_DTO" field.</summary>
        public const int RaceDetailsDTOFieldNumber = 1;

        private static readonly pb::MessageParser<FindAllSwimmersDetailsForRaceRequest> _parser =
            new pb::MessageParser<FindAllSwimmersDetailsForRaceRequest>(
                () => new FindAllSwimmersDetailsForRaceRequest());

        private global::Model.Protocol.Protobuf.RaceDetailsDTO raceDetailsDTO_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllSwimmersDetailsForRaceRequest()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllSwimmersDetailsForRaceRequest(FindAllSwimmersDetailsForRaceRequest other) : this()
        {
            RaceDetailsDTO = other.raceDetailsDTO_ != null ? other.RaceDetailsDTO.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FindAllSwimmersDetailsForRaceRequest> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.RaceDetailsDTO RaceDetailsDTO
        {
            get { return raceDetailsDTO_; }
            set { raceDetailsDTO_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllSwimmersDetailsForRaceRequest Clone()
        {
            return new FindAllSwimmersDetailsForRaceRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FindAllSwimmersDetailsForRaceRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(RaceDetailsDTO, other.RaceDetailsDTO)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (raceDetailsDTO_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(RaceDetailsDTO);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (raceDetailsDTO_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RaceDetailsDTO);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FindAllSwimmersDetailsForRaceRequest other)
        {
            if (other == null)
            {
                return;
            }

            if (other.raceDetailsDTO_ != null)
            {
                if (raceDetailsDTO_ == null)
                {
                    raceDetailsDTO_ = new global::Model.Protocol.Protobuf.RaceDetailsDTO();
                }

                RaceDetailsDTO.MergeFrom(other.RaceDetailsDTO);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        if (raceDetailsDTO_ == null)
                        {
                            raceDetailsDTO_ = new global::Model.Protocol.Protobuf.RaceDetailsDTO();
                        }

                        input.ReadMessage(raceDetailsDTO_);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FindAllSwimmersDetailsForRaceRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (raceDetailsDTO_ != null) hash ^= RaceDetailsDTO.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class AddSwimmerRequest : pb::IMessage<AddSwimmerRequest>
    {
        /// <summary>Field number for the "swimmer_DTO" field.</summary>
        public const int SwimmerDTOFieldNumber = 1;

        private static readonly pb::MessageParser<AddSwimmerRequest> _parser =
            new pb::MessageParser<AddSwimmerRequest>(() => new AddSwimmerRequest());

        private global::Model.Protocol.Protobuf.SwimmerDTO swimmerDTO_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddSwimmerRequest()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddSwimmerRequest(AddSwimmerRequest other) : this()
        {
            SwimmerDTO = other.swimmerDTO_ != null ? other.SwimmerDTO.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddSwimmerRequest> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.SwimmerDTO SwimmerDTO
        {
            get { return swimmerDTO_; }
            set { swimmerDTO_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddSwimmerRequest Clone()
        {
            return new AddSwimmerRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddSwimmerRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(SwimmerDTO, other.SwimmerDTO)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (swimmerDTO_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(SwimmerDTO);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (swimmerDTO_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwimmerDTO);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddSwimmerRequest other)
        {
            if (other == null)
            {
                return;
            }

            if (other.swimmerDTO_ != null)
            {
                if (swimmerDTO_ == null)
                {
                    swimmerDTO_ = new global::Model.Protocol.Protobuf.SwimmerDTO();
                }

                SwimmerDTO.MergeFrom(other.SwimmerDTO);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        if (swimmerDTO_ == null)
                        {
                            swimmerDTO_ = new global::Model.Protocol.Protobuf.SwimmerDTO();
                        }

                        input.ReadMessage(swimmerDTO_);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AddSwimmerRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (swimmerDTO_ != null) hash ^= SwimmerDTO.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class Request : pb::IMessage<Request>
    {
        /// <summary>Enum of possible cases for the "request_type" oneof.</summary>
        public enum RequestTypeOneofCase
        {
            None = 0,
            LoginRequest = 1,
            LogoutRequest = 2,
            FindAllRacesDetailsRequest = 3,
            FindAllSwimmersDetailsForRaceRequest = 4,
            AddSwimmerRequest = 5
        }

        /// <summary>Field number for the "login_request" field.</summary>
        public const int LoginRequestFieldNumber = 1;

        /// <summary>Field number for the "logout_request" field.</summary>
        public const int LogoutRequestFieldNumber = 2;

        /// <summary>Field number for the "find_all_races_details_request" field.</summary>
        public const int FindAllRacesDetailsRequestFieldNumber = 3;

        /// <summary>Field number for the "find_all_swimmers_details_for_race_request" field.</summary>
        public const int FindAllSwimmersDetailsForRaceRequestFieldNumber = 4;

        /// <summary>Field number for the "add_swimmer_request" field.</summary>
        public const int AddSwimmerRequestFieldNumber = 5;

        private static readonly pb::MessageParser<Request>
            _parser = new pb::MessageParser<Request>(() => new Request());

        private object requestType_;
        private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this()
        {
            switch (other.RequestTypeCase)
            {
                case RequestTypeOneofCase.LoginRequest:
                    LoginRequest = other.LoginRequest.Clone();
                    break;
                case RequestTypeOneofCase.LogoutRequest:
                    LogoutRequest = other.LogoutRequest.Clone();
                    break;
                case RequestTypeOneofCase.FindAllRacesDetailsRequest:
                    FindAllRacesDetailsRequest = other.FindAllRacesDetailsRequest.Clone();
                    break;
                case RequestTypeOneofCase.FindAllSwimmersDetailsForRaceRequest:
                    FindAllSwimmersDetailsForRaceRequest = other.FindAllSwimmersDetailsForRaceRequest.Clone();
                    break;
                case RequestTypeOneofCase.AddSwimmerRequest:
                    AddSwimmerRequest = other.AddSwimmerRequest.Clone();
                    break;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get
            {
                return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[10];
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.LoginRequest LoginRequest
        {
            get
            {
                return requestTypeCase_ == RequestTypeOneofCase.LoginRequest
                    ? (global::Model.Protocol.Protobuf.LoginRequest) requestType_
                    : null;
            }
            set
            {
                requestType_ = value;
                requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.LoginRequest;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.LogoutRequest LogoutRequest
        {
            get
            {
                return requestTypeCase_ == RequestTypeOneofCase.LogoutRequest
                    ? (global::Model.Protocol.Protobuf.LogoutRequest) requestType_
                    : null;
            }
            set
            {
                requestType_ = value;
                requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.LogoutRequest;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.FindAllRacesDetailsRequest FindAllRacesDetailsRequest
        {
            get
            {
                return requestTypeCase_ == RequestTypeOneofCase.FindAllRacesDetailsRequest
                    ? (global::Model.Protocol.Protobuf.FindAllRacesDetailsRequest) requestType_
                    : null;
            }
            set
            {
                requestType_ = value;
                requestTypeCase_ = value == null
                    ? RequestTypeOneofCase.None
                    : RequestTypeOneofCase.FindAllRacesDetailsRequest;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceRequest FindAllSwimmersDetailsForRaceRequest
        {
            get
            {
                return requestTypeCase_ == RequestTypeOneofCase.FindAllSwimmersDetailsForRaceRequest
                    ? (global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceRequest) requestType_
                    : null;
            }
            set
            {
                requestType_ = value;
                requestTypeCase_ = value == null
                    ? RequestTypeOneofCase.None
                    : RequestTypeOneofCase.FindAllSwimmersDetailsForRaceRequest;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.AddSwimmerRequest AddSwimmerRequest
        {
            get
            {
                return requestTypeCase_ == RequestTypeOneofCase.AddSwimmerRequest
                    ? (global::Model.Protocol.Protobuf.AddSwimmerRequest) requestType_
                    : null;
            }
            set
            {
                requestType_ = value;
                requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.AddSwimmerRequest;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestTypeOneofCase RequestTypeCase
        {
            get { return requestTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone()
        {
            return new Request(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(LoginRequest, other.LoginRequest)) return false;
            if (!Equals(LogoutRequest, other.LogoutRequest)) return false;
            if (!Equals(FindAllRacesDetailsRequest, other.FindAllRacesDetailsRequest)) return false;
            if (!Equals(FindAllSwimmersDetailsForRaceRequest, other.FindAllSwimmersDetailsForRaceRequest)) return false;
            if (!Equals(AddSwimmerRequest, other.AddSwimmerRequest)) return false;
            if (RequestTypeCase != other.RequestTypeCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (requestTypeCase_ == RequestTypeOneofCase.LoginRequest)
            {
                output.WriteRawTag(10);
                output.WriteMessage(LoginRequest);
            }

            if (requestTypeCase_ == RequestTypeOneofCase.LogoutRequest)
            {
                output.WriteRawTag(18);
                output.WriteMessage(LogoutRequest);
            }

            if (requestTypeCase_ == RequestTypeOneofCase.FindAllRacesDetailsRequest)
            {
                output.WriteRawTag(26);
                output.WriteMessage(FindAllRacesDetailsRequest);
            }

            if (requestTypeCase_ == RequestTypeOneofCase.FindAllSwimmersDetailsForRaceRequest)
            {
                output.WriteRawTag(34);
                output.WriteMessage(FindAllSwimmersDetailsForRaceRequest);
            }

            if (requestTypeCase_ == RequestTypeOneofCase.AddSwimmerRequest)
            {
                output.WriteRawTag(42);
                output.WriteMessage(AddSwimmerRequest);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (requestTypeCase_ == RequestTypeOneofCase.LoginRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRequest);
            }

            if (requestTypeCase_ == RequestTypeOneofCase.LogoutRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogoutRequest);
            }

            if (requestTypeCase_ == RequestTypeOneofCase.FindAllRacesDetailsRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FindAllRacesDetailsRequest);
            }

            if (requestTypeCase_ == RequestTypeOneofCase.FindAllSwimmersDetailsForRaceRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FindAllSwimmersDetailsForRaceRequest);
            }

            if (requestTypeCase_ == RequestTypeOneofCase.AddSwimmerRequest)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddSwimmerRequest);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other)
        {
            if (other == null)
            {
                return;
            }

            switch (other.RequestTypeCase)
            {
                case RequestTypeOneofCase.LoginRequest:
                    LoginRequest = other.LoginRequest;
                    break;
                case RequestTypeOneofCase.LogoutRequest:
                    LogoutRequest = other.LogoutRequest;
                    break;
                case RequestTypeOneofCase.FindAllRacesDetailsRequest:
                    FindAllRacesDetailsRequest = other.FindAllRacesDetailsRequest;
                    break;
                case RequestTypeOneofCase.FindAllSwimmersDetailsForRaceRequest:
                    FindAllSwimmersDetailsForRaceRequest = other.FindAllSwimmersDetailsForRaceRequest;
                    break;
                case RequestTypeOneofCase.AddSwimmerRequest:
                    AddSwimmerRequest = other.AddSwimmerRequest;
                    break;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        global::Model.Protocol.Protobuf.LoginRequest subBuilder =
                            new global::Model.Protocol.Protobuf.LoginRequest();
                        if (requestTypeCase_ == RequestTypeOneofCase.LoginRequest)
                        {
                            subBuilder.MergeFrom(LoginRequest);
                        }

                        input.ReadMessage(subBuilder);
                        LoginRequest = subBuilder;
                        break;
                    }
                    case 18:
                    {
                        global::Model.Protocol.Protobuf.LogoutRequest subBuilder =
                            new global::Model.Protocol.Protobuf.LogoutRequest();
                        if (requestTypeCase_ == RequestTypeOneofCase.LogoutRequest)
                        {
                            subBuilder.MergeFrom(LogoutRequest);
                        }

                        input.ReadMessage(subBuilder);
                        LogoutRequest = subBuilder;
                        break;
                    }
                    case 26:
                    {
                        global::Model.Protocol.Protobuf.FindAllRacesDetailsRequest subBuilder =
                            new global::Model.Protocol.Protobuf.FindAllRacesDetailsRequest();
                        if (requestTypeCase_ == RequestTypeOneofCase.FindAllRacesDetailsRequest)
                        {
                            subBuilder.MergeFrom(FindAllRacesDetailsRequest);
                        }

                        input.ReadMessage(subBuilder);
                        FindAllRacesDetailsRequest = subBuilder;
                        break;
                    }
                    case 34:
                    {
                        global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceRequest subBuilder =
                            new global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceRequest();
                        if (requestTypeCase_ == RequestTypeOneofCase.FindAllSwimmersDetailsForRaceRequest)
                        {
                            subBuilder.MergeFrom(FindAllSwimmersDetailsForRaceRequest);
                        }

                        input.ReadMessage(subBuilder);
                        FindAllSwimmersDetailsForRaceRequest = subBuilder;
                        break;
                    }
                    case 42:
                    {
                        global::Model.Protocol.Protobuf.AddSwimmerRequest subBuilder =
                            new global::Model.Protocol.Protobuf.AddSwimmerRequest();
                        if (requestTypeCase_ == RequestTypeOneofCase.AddSwimmerRequest)
                        {
                            subBuilder.MergeFrom(AddSwimmerRequest);
                        }

                        input.ReadMessage(subBuilder);
                        AddSwimmerRequest = subBuilder;
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRequestType()
        {
            requestTypeCase_ = RequestTypeOneofCase.None;
            requestType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (requestTypeCase_ == RequestTypeOneofCase.LoginRequest) hash ^= LoginRequest.GetHashCode();
            if (requestTypeCase_ == RequestTypeOneofCase.LogoutRequest) hash ^= LogoutRequest.GetHashCode();
            if (requestTypeCase_ == RequestTypeOneofCase.FindAllRacesDetailsRequest)
                hash ^= FindAllRacesDetailsRequest.GetHashCode();
            if (requestTypeCase_ == RequestTypeOneofCase.FindAllSwimmersDetailsForRaceRequest)
                hash ^= FindAllSwimmersDetailsForRaceRequest.GetHashCode();
            if (requestTypeCase_ == RequestTypeOneofCase.AddSwimmerRequest) hash ^= AddSwimmerRequest.GetHashCode();
            hash ^= (int) requestTypeCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class OkResponse : pb::IMessage<OkResponse>
    {
        private static readonly pb::MessageParser<OkResponse> _parser =
            new pb::MessageParser<OkResponse>(() => new OkResponse());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OkResponse()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OkResponse(OkResponse other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OkResponse> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get
            {
                return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[11];
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OkResponse Clone()
        {
            return new OkResponse(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OkResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OkResponse other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OkResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class ErrorResponse : pb::IMessage<ErrorResponse>
    {
        /// <summary>Field number for the "error_message" field.</summary>
        public const int ErrorMessageFieldNumber = 1;

        private static readonly pb::MessageParser<ErrorResponse> _parser =
            new pb::MessageParser<ErrorResponse>(() => new ErrorResponse());

        private string errorMessage_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ErrorResponse()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ErrorResponse(ErrorResponse other) : this()
        {
            errorMessage_ = other.errorMessage_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ErrorResponse> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get
            {
                return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[12];
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorMessage
        {
            get { return errorMessage_; }
            set { errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ErrorResponse Clone()
        {
            return new ErrorResponse(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ErrorResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (ErrorMessage != other.ErrorMessage) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ErrorMessage.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ErrorMessage);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ErrorMessage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ErrorResponse other)
        {
            if (other == null)
            {
                return;
            }

            if (other.ErrorMessage.Length != 0)
            {
                ErrorMessage = other.ErrorMessage;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        ErrorMessage = input.ReadString();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ErrorResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class FindAllRacesDetailsResponse : pb::IMessage<FindAllRacesDetailsResponse>
    {
        /// <summary>Field number for the "all_races_details" field.</summary>
        public const int AllRacesDetailsFieldNumber = 1;

        private static readonly pb::MessageParser<FindAllRacesDetailsResponse> _parser =
            new pb::MessageParser<FindAllRacesDetailsResponse>(() => new FindAllRacesDetailsResponse());

        private static readonly pb::FieldCodec<global::Model.Protocol.Protobuf.RaceDTO> _repeated_allRacesDetails_codec
            = pb::FieldCodec.ForMessage(10, global::Model.Protocol.Protobuf.RaceDTO.Parser);

        private readonly pbc::RepeatedField<global::Model.Protocol.Protobuf.RaceDTO> allRacesDetails_ =
            new pbc::RepeatedField<global::Model.Protocol.Protobuf.RaceDTO>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllRacesDetailsResponse()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllRacesDetailsResponse(FindAllRacesDetailsResponse other) : this()
        {
            allRacesDetails_ = other.allRacesDetails_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FindAllRacesDetailsResponse> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get
            {
                return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[13];
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Model.Protocol.Protobuf.RaceDTO> AllRacesDetails
        {
            get { return allRacesDetails_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllRacesDetailsResponse Clone()
        {
            return new FindAllRacesDetailsResponse(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FindAllRacesDetailsResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!allRacesDetails_.Equals(other.allRacesDetails_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            allRacesDetails_.WriteTo(output, _repeated_allRacesDetails_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += allRacesDetails_.CalculateSize(_repeated_allRacesDetails_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FindAllRacesDetailsResponse other)
        {
            if (other == null)
            {
                return;
            }

            allRacesDetails_.Add(other.allRacesDetails_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        allRacesDetails_.AddEntriesFrom(input, _repeated_allRacesDetails_codec);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FindAllRacesDetailsResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= allRacesDetails_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class
        FindAllSwimmersDetailsForRaceResponse : pb::IMessage<FindAllSwimmersDetailsForRaceResponse>
    {
        /// <summary>Field number for the "all_swimmers_details_for_race" field.</summary>
        public const int AllSwimmersDetailsForRaceFieldNumber = 1;

        private static readonly pb::MessageParser<FindAllSwimmersDetailsForRaceResponse> _parser =
            new pb::MessageParser<FindAllSwimmersDetailsForRaceResponse>(() =>
                new FindAllSwimmersDetailsForRaceResponse());

        private static readonly pb::FieldCodec<global::Model.Protocol.Protobuf.SwimmerDTO>
            _repeated_allSwimmersDetailsForRace_codec
                = pb::FieldCodec.ForMessage(10, global::Model.Protocol.Protobuf.SwimmerDTO.Parser);

        private readonly pbc::RepeatedField<global::Model.Protocol.Protobuf.SwimmerDTO> allSwimmersDetailsForRace_ =
            new pbc::RepeatedField<global::Model.Protocol.Protobuf.SwimmerDTO>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllSwimmersDetailsForRaceResponse()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllSwimmersDetailsForRaceResponse(FindAllSwimmersDetailsForRaceResponse other) : this()
        {
            allSwimmersDetailsForRace_ = other.allSwimmersDetailsForRace_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FindAllSwimmersDetailsForRaceResponse> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get
            {
                return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[14];
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Model.Protocol.Protobuf.SwimmerDTO> AllSwimmersDetailsForRace
        {
            get { return allSwimmersDetailsForRace_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindAllSwimmersDetailsForRaceResponse Clone()
        {
            return new FindAllSwimmersDetailsForRaceResponse(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FindAllSwimmersDetailsForRaceResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!allSwimmersDetailsForRace_.Equals(other.allSwimmersDetailsForRace_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            allSwimmersDetailsForRace_.WriteTo(output, _repeated_allSwimmersDetailsForRace_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += allSwimmersDetailsForRace_.CalculateSize(_repeated_allSwimmersDetailsForRace_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FindAllSwimmersDetailsForRaceResponse other)
        {
            if (other == null)
            {
                return;
            }

            allSwimmersDetailsForRace_.Add(other.allSwimmersDetailsForRace_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        allSwimmersDetailsForRace_.AddEntriesFrom(input, _repeated_allSwimmersDetailsForRace_codec);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FindAllSwimmersDetailsForRaceResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= allSwimmersDetailsForRace_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class RacesUpdatedResponse : pb::IMessage<RacesUpdatedResponse>
    {
        private static readonly pb::MessageParser<RacesUpdatedResponse> _parser =
            new pb::MessageParser<RacesUpdatedResponse>(() => new RacesUpdatedResponse());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RacesUpdatedResponse()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RacesUpdatedResponse(RacesUpdatedResponse other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RacesUpdatedResponse> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get
            {
                return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[15];
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RacesUpdatedResponse Clone()
        {
            return new RacesUpdatedResponse(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RacesUpdatedResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RacesUpdatedResponse other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RacesUpdatedResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class Response : pb::IMessage<Response>
    {
        /// <summary>Enum of possible cases for the "response_type" oneof.</summary>
        public enum ResponseTypeOneofCase
        {
            None = 0,
            OkResponse = 1,
            ErrorResponse = 2,
            FindAllRacesDetailsResponse = 3,
            FindAllSwimmersDetailsForRaceResponse = 4,
            RacesUpdatedResponse = 5
        }

        /// <summary>Field number for the "ok_response" field.</summary>
        public const int OkResponseFieldNumber = 1;

        /// <summary>Field number for the "error_response" field.</summary>
        public const int ErrorResponseFieldNumber = 2;

        /// <summary>Field number for the "find_all_races_details_response" field.</summary>
        public const int FindAllRacesDetailsResponseFieldNumber = 3;

        /// <summary>Field number for the "find_all_swimmers_details_for_race_response" field.</summary>
        public const int FindAllSwimmersDetailsForRaceResponseFieldNumber = 4;

        /// <summary>Field number for the "races_updated_response" field.</summary>
        public const int RacesUpdatedResponseFieldNumber = 5;

        private static readonly pb::MessageParser<Response> _parser =
            new pb::MessageParser<Response>(() => new Response());

        private object responseType_;
        private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this()
        {
            switch (other.ResponseTypeCase)
            {
                case ResponseTypeOneofCase.OkResponse:
                    OkResponse = other.OkResponse.Clone();
                    break;
                case ResponseTypeOneofCase.ErrorResponse:
                    ErrorResponse = other.ErrorResponse.Clone();
                    break;
                case ResponseTypeOneofCase.FindAllRacesDetailsResponse:
                    FindAllRacesDetailsResponse = other.FindAllRacesDetailsResponse.Clone();
                    break;
                case ResponseTypeOneofCase.FindAllSwimmersDetailsForRaceResponse:
                    FindAllSwimmersDetailsForRaceResponse = other.FindAllSwimmersDetailsForRaceResponse.Clone();
                    break;
                case ResponseTypeOneofCase.RacesUpdatedResponse:
                    RacesUpdatedResponse = other.RacesUpdatedResponse.Clone();
                    break;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get
            {
                return global::Model.Protocol.Protobuf.SwimmingContestProtobufReflection.Descriptor.MessageTypes[16];
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.OkResponse OkResponse
        {
            get
            {
                return responseTypeCase_ == ResponseTypeOneofCase.OkResponse
                    ? (global::Model.Protocol.Protobuf.OkResponse) responseType_
                    : null;
            }
            set
            {
                responseType_ = value;
                responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.OkResponse;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.ErrorResponse ErrorResponse
        {
            get
            {
                return responseTypeCase_ == ResponseTypeOneofCase.ErrorResponse
                    ? (global::Model.Protocol.Protobuf.ErrorResponse) responseType_
                    : null;
            }
            set
            {
                responseType_ = value;
                responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ErrorResponse;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.FindAllRacesDetailsResponse FindAllRacesDetailsResponse
        {
            get
            {
                return responseTypeCase_ == ResponseTypeOneofCase.FindAllRacesDetailsResponse
                    ? (global::Model.Protocol.Protobuf.FindAllRacesDetailsResponse) responseType_
                    : null;
            }
            set
            {
                responseType_ = value;
                responseTypeCase_ = value == null
                    ? ResponseTypeOneofCase.None
                    : ResponseTypeOneofCase.FindAllRacesDetailsResponse;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceResponse
            FindAllSwimmersDetailsForRaceResponse
        {
            get
            {
                return responseTypeCase_ == ResponseTypeOneofCase.FindAllSwimmersDetailsForRaceResponse
                    ? (global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceResponse) responseType_
                    : null;
            }
            set
            {
                responseType_ = value;
                responseTypeCase_ = value == null
                    ? ResponseTypeOneofCase.None
                    : ResponseTypeOneofCase.FindAllSwimmersDetailsForRaceResponse;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Model.Protocol.Protobuf.RacesUpdatedResponse RacesUpdatedResponse
        {
            get
            {
                return responseTypeCase_ == ResponseTypeOneofCase.RacesUpdatedResponse
                    ? (global::Model.Protocol.Protobuf.RacesUpdatedResponse) responseType_
                    : null;
            }
            set
            {
                responseType_ = value;
                responseTypeCase_ =
                    value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.RacesUpdatedResponse;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseTypeOneofCase ResponseTypeCase
        {
            get { return responseTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone()
        {
            return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(OkResponse, other.OkResponse)) return false;
            if (!Equals(ErrorResponse, other.ErrorResponse)) return false;
            if (!Equals(FindAllRacesDetailsResponse, other.FindAllRacesDetailsResponse)) return false;
            if (!Equals(FindAllSwimmersDetailsForRaceResponse, other.FindAllSwimmersDetailsForRaceResponse))
                return false;
            if (!Equals(RacesUpdatedResponse, other.RacesUpdatedResponse)) return false;
            if (ResponseTypeCase != other.ResponseTypeCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (responseTypeCase_ == ResponseTypeOneofCase.OkResponse)
            {
                output.WriteRawTag(10);
                output.WriteMessage(OkResponse);
            }

            if (responseTypeCase_ == ResponseTypeOneofCase.ErrorResponse)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ErrorResponse);
            }

            if (responseTypeCase_ == ResponseTypeOneofCase.FindAllRacesDetailsResponse)
            {
                output.WriteRawTag(26);
                output.WriteMessage(FindAllRacesDetailsResponse);
            }

            if (responseTypeCase_ == ResponseTypeOneofCase.FindAllSwimmersDetailsForRaceResponse)
            {
                output.WriteRawTag(34);
                output.WriteMessage(FindAllSwimmersDetailsForRaceResponse);
            }

            if (responseTypeCase_ == ResponseTypeOneofCase.RacesUpdatedResponse)
            {
                output.WriteRawTag(42);
                output.WriteMessage(RacesUpdatedResponse);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (responseTypeCase_ == ResponseTypeOneofCase.OkResponse)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OkResponse);
            }

            if (responseTypeCase_ == ResponseTypeOneofCase.ErrorResponse)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorResponse);
            }

            if (responseTypeCase_ == ResponseTypeOneofCase.FindAllRacesDetailsResponse)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FindAllRacesDetailsResponse);
            }

            if (responseTypeCase_ == ResponseTypeOneofCase.FindAllSwimmersDetailsForRaceResponse)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FindAllSwimmersDetailsForRaceResponse);
            }

            if (responseTypeCase_ == ResponseTypeOneofCase.RacesUpdatedResponse)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RacesUpdatedResponse);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other)
        {
            if (other == null)
            {
                return;
            }

            switch (other.ResponseTypeCase)
            {
                case ResponseTypeOneofCase.OkResponse:
                    OkResponse = other.OkResponse;
                    break;
                case ResponseTypeOneofCase.ErrorResponse:
                    ErrorResponse = other.ErrorResponse;
                    break;
                case ResponseTypeOneofCase.FindAllRacesDetailsResponse:
                    FindAllRacesDetailsResponse = other.FindAllRacesDetailsResponse;
                    break;
                case ResponseTypeOneofCase.FindAllSwimmersDetailsForRaceResponse:
                    FindAllSwimmersDetailsForRaceResponse = other.FindAllSwimmersDetailsForRaceResponse;
                    break;
                case ResponseTypeOneofCase.RacesUpdatedResponse:
                    RacesUpdatedResponse = other.RacesUpdatedResponse;
                    break;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        global::Model.Protocol.Protobuf.OkResponse subBuilder =
                            new global::Model.Protocol.Protobuf.OkResponse();
                        if (responseTypeCase_ == ResponseTypeOneofCase.OkResponse)
                        {
                            subBuilder.MergeFrom(OkResponse);
                        }

                        input.ReadMessage(subBuilder);
                        OkResponse = subBuilder;
                        break;
                    }
                    case 18:
                    {
                        global::Model.Protocol.Protobuf.ErrorResponse subBuilder =
                            new global::Model.Protocol.Protobuf.ErrorResponse();
                        if (responseTypeCase_ == ResponseTypeOneofCase.ErrorResponse)
                        {
                            subBuilder.MergeFrom(ErrorResponse);
                        }

                        input.ReadMessage(subBuilder);
                        ErrorResponse = subBuilder;
                        break;
                    }
                    case 26:
                    {
                        global::Model.Protocol.Protobuf.FindAllRacesDetailsResponse subBuilder =
                            new global::Model.Protocol.Protobuf.FindAllRacesDetailsResponse();
                        if (responseTypeCase_ == ResponseTypeOneofCase.FindAllRacesDetailsResponse)
                        {
                            subBuilder.MergeFrom(FindAllRacesDetailsResponse);
                        }

                        input.ReadMessage(subBuilder);
                        FindAllRacesDetailsResponse = subBuilder;
                        break;
                    }
                    case 34:
                    {
                        global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceResponse subBuilder =
                            new global::Model.Protocol.Protobuf.FindAllSwimmersDetailsForRaceResponse();
                        if (responseTypeCase_ == ResponseTypeOneofCase.FindAllSwimmersDetailsForRaceResponse)
                        {
                            subBuilder.MergeFrom(FindAllSwimmersDetailsForRaceResponse);
                        }

                        input.ReadMessage(subBuilder);
                        FindAllSwimmersDetailsForRaceResponse = subBuilder;
                        break;
                    }
                    case 42:
                    {
                        global::Model.Protocol.Protobuf.RacesUpdatedResponse subBuilder =
                            new global::Model.Protocol.Protobuf.RacesUpdatedResponse();
                        if (responseTypeCase_ == ResponseTypeOneofCase.RacesUpdatedResponse)
                        {
                            subBuilder.MergeFrom(RacesUpdatedResponse);
                        }

                        input.ReadMessage(subBuilder);
                        RacesUpdatedResponse = subBuilder;
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResponseType()
        {
            responseTypeCase_ = ResponseTypeOneofCase.None;
            responseType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (responseTypeCase_ == ResponseTypeOneofCase.OkResponse) hash ^= OkResponse.GetHashCode();
            if (responseTypeCase_ == ResponseTypeOneofCase.ErrorResponse) hash ^= ErrorResponse.GetHashCode();
            if (responseTypeCase_ == ResponseTypeOneofCase.FindAllRacesDetailsResponse)
                hash ^= FindAllRacesDetailsResponse.GetHashCode();
            if (responseTypeCase_ == ResponseTypeOneofCase.FindAllSwimmersDetailsForRaceResponse)
                hash ^= FindAllSwimmersDetailsForRaceResponse.GetHashCode();
            if (responseTypeCase_ == ResponseTypeOneofCase.RacesUpdatedResponse)
                hash ^= RacesUpdatedResponse.GetHashCode();
            hash ^= (int) responseTypeCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    #endregion
}

#endregion Designer generated code